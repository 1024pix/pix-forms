---
import 'dotenv/config';
import surveyJson from '../../forms/test-form.json';
import getConfigParam from '../../services/config.service';

const _surveySchema = JSON.stringify(surveyJson);
const friendlyCaptchaSiteKey = getConfigParam('FRIENDLY_CAPTCHA_SITE_KEY');

const params = Astro.params;

export const prerender = false;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />

    <script>
      import { SurveyModel } from "survey-js-ui";

      import "survey-core";
      import "survey-core/i18n/french";
      import "survey-core/survey-core.css";

      import { FriendlyCaptchaSDK } from "@friendlycaptcha/sdk"

      // Re-use this SDK if you are creating multiple widgets.
      const sdk = new FriendlyCaptchaSDK();

      import { actions } from "astro:actions";

      const surveyJson = JSON.parse(document.body.getAttribute("data-survey"));

      const surveyInstance = new SurveyModel(surveyJson.schema);
      surveyInstance.locale = surveyJson.schema.locale || "fr";


      function renderForm(captchaResponse: string) {
        surveyInstance.render(document.getElementById("surveyContainer"));
        console.log(surveyJson.context )
        surveyInstance.onComplete.add(async () => {
          const result = surveyInstance.data;
          const {error} = await actions.answer({ formId: surveyJson.formId, formResult: result, captchaResponse, context: surveyJson.context });

          if (error) {
            alert("Une erreur est survenue lors de la soumission du formulaire : " + error.message);
            console.error("Error submitting survey:", error);
            return;
          }

          console.log("Survey results:", result);
          alert("Thank you for completing the survey!");
        });
      }

      document.addEventListener("DOMContentLoaded", function () {
        // HTML element that you want to mount the widget to.
        const mount = (document.querySelector("#friendly-captcha") as HTMLElement);

        // Create the widget
        const widget = sdk.createWidget({
          element: mount,
          sitekey: mount.dataset.siteKey,
        });
        widget.addEventListener('frc:widget.complete', async (event)=> {
           renderForm(event.detail.response)
           mount.style.display = 'none'
        });
      });
    </script>
  </head>
  <body data-survey={_surveySchema}>
    <h1>Formulaire {params.slug}</h1>

    <div id="friendly-captcha" data-site-key={friendlyCaptchaSiteKey}></div>

    <div id="surveyContainer"></div>
  </body>
</html>
